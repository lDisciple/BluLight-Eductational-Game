/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package BluLight;

import Entities.PersonalResearchEntity;
import Entities.ResearchEntity;
import java.io.EOFException;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.ServerSocket;
import java.net.Socket;
import java.net.SocketTimeoutException;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.persistence.RollbackException;
import javax.swing.ImageIcon;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author Jonathan Botha
 */
public class ResearchShare extends javax.swing.JFrame {
    private ArrayList<String> resList;
    private final NetShareHost host;
    private final NetShareClient client;
    /**
     * Creates new form ResearchManager
     */
    public ResearchShare() {
        initComponents();
        setIconImage(new ImageIcon(LoginForm.class.getResource("/Images/Logo.png")).getImage());
        setLocation(Main.paneX -getWidth()/2, Main.paneY -getHeight()/2);
        refreshResearchList();
        client = new NetShareClient();
        host = new NetShareHost();
    }
    
    private void refreshResearchList(){
        resList = new ArrayList();
        ArrayList listData = new ArrayList();
        for (PersonalResearchEntity pr : Main.dbm.personalResearchList) {
            if (pr.getUserid().equals(Main.curProfile.getId()) && !pr.getDeleted()) {
                resList.add(pr.getResearchid());
                listData.add(pr.getResearchid().substring(36).trim()//Title
                        + " - " + pr.getResearchid().substring(12, 36).trim()//author
                        );
            }
         }
        lstResearchItems.setListData(listData.toArray(new String[0]));
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        lstResearchItems = new javax.swing.JList();
        btnExpResearch = new javax.swing.JButton();
        btnImpResearch = new javax.swing.JButton();
        btnNetShareHelp = new javax.swing.JButton();
        btnNetShareConn = new javax.swing.JButton();
        btnNetShareHost = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JSeparator();
        jSeparator2 = new javax.swing.JSeparator();
        btnCancel = new javax.swing.JButton();
        txfNetShare = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Share research");
        setResizable(false);

        lstResearchItems.setBorder(javax.swing.BorderFactory.createTitledBorder("Research"));
        jScrollPane1.setViewportView(lstResearchItems);

        btnExpResearch.setText("Export research");
        btnExpResearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExpResearchActionPerformed(evt);
            }
        });

        btnImpResearch.setText("Import research");
        btnImpResearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnImpResearchActionPerformed(evt);
            }
        });

        btnNetShareHelp.setText("Network share help");
        btnNetShareHelp.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNetShareHelpActionPerformed(evt);
            }
        });

        btnNetShareConn.setText("Connect to network share..");
        btnNetShareConn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNetShareConnActionPerformed(evt);
            }
        });

        btnNetShareHost.setText("Host network share");
        btnNetShareHost.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnNetShareHostActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnNetShareHost, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnImpResearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnExpResearch, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnNetShareConn, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
                    .addComponent(btnNetShareHelp, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jSeparator1)
                    .addComponent(jSeparator2)
                    .addComponent(btnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(txfNetShare))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(btnNetShareHost)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNetShareConn)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txfNetShare, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnNetShareHelp)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 5, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnImpResearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnExpResearch)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnCancel)
                        .addGap(0, 74, Short.MAX_VALUE)))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnNetShareHelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNetShareHelpActionPerformed
        JOptionPane.showMessageDialog(rootPane, "To share over a network:\n"
            + "1. Ensure you are connected via wifi.\n"
            + "2. Use one of the devices to host by clicking 'Host Network Share'\n"
            + "3. Use the other device to connect by clicking 'Connect to Network Share'\n"
            + "4. Get the number that appears for the host.\n"
            + "5. Enter it into the connection device.\n"
            + "6. Wait for the sharing to complete.",
            "Network sharing.", JOptionPane.INFORMATION_MESSAGE);
    }//GEN-LAST:event_btnNetShareHelpActionPerformed

    private void btnNetShareConnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNetShareConnActionPerformed
        System.out.println(client.running);
        System.out.println(client.connected);
        if (!host.running & !host.connected) {
            if (client.running || client.connected) {
                client.stop();
                txfNetShare.setEditable(true);
                btnNetShareConn.setText("Connect to network share..");
            }else{
                try {
                    InetAddress.getByName(txfNetShare.getText());
                    new Thread(client).start();
                    txfNetShare.setEditable(false);
                    btnNetShareConn.setText("Close connection...");
                } catch (UnknownHostException ex) {
                    txfNetShare.setText("Invaild IP address.");
                }
            }
        }
    }//GEN-LAST:event_btnNetShareConnActionPerformed

    private void btnNetShareHostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNetShareHostActionPerformed
        if (!client.running && !client.connected) {
            if (host.running || host.connected) {
                host.stop();
                txfNetShare.setEditable(true);
                btnNetShareHost.setText("Host network share");
            }else{
                new Thread(host).start();
                txfNetShare.setEditable(false);
                btnNetShareHost.setText("Stop hosting...");
            }
        }
    }//GEN-LAST:event_btnNetShareHostActionPerformed

    private void btnExpResearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExpResearchActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("Text file","txt"));
        //Get the selected research
        ArrayList<ResearchEntity> resShareList = new ArrayList();
        for (int val : lstResearchItems.getSelectedIndices()) {
            resShareList.add(Main.dbm.researchList.get(
            Main.dbm.getResearchByID(resList.get(val))
            ));
        }
        //Get path
        if (fc.showSaveDialog(rootPane) == JFileChooser.APPROVE_OPTION) {
            String path = fc.getSelectedFile().getPath();
            if (path.indexOf(".txt" )!= path.length()-4) {
                path += ".txt";
            }
            //Write file
            File f = new File(path);
            try {
                try (PrintWriter pw = new PrintWriter(new FileWriter(f))) {
                    f.createNewFile();
                    pw.println(resShareList.get(0).getId() + "¿");
                    pw.println(resShareList.get(0).getRelatedformula() + "¿");
                    pw.println(resShareList.get(0).getText() + "¿");
                    pw.println(resShareList.get(0).getRating() + "¿");
                    pw.print(resShareList.get(0).getVoteamount() + "¿");
                    pw.print("§");
                    for (int i = 1; i < resShareList.size(); i++) {
                        pw.println();
                        pw.println(resShareList.get(i).getId() + "¿");
                        pw.println(resShareList.get(i).getRelatedformula() + "¿");
                        pw.println(resShareList.get(i).getText() + "¿");
                        pw.println(resShareList.get(i).getRating() + "¿");
                        pw.print(resShareList.get(i).getVoteamount() + "¿");
                        pw.print("§");
                    }
                }
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(rootPane, "Could not save file.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnExpResearchActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        Main.paneX = getX() +getWidth()/2;
        Main.paneY = getY() +getHeight()/2;
        new LauncherForm().setVisible(true);
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnImpResearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnImpResearchActionPerformed
        final JFileChooser fc = new JFileChooser();
        fc.setFileFilter(new FileNameExtensionFilter("Text file","txt"));
        ArrayList<String> existingRes = new ArrayList();
        //Get path
        if (fc.showOpenDialog(rootPane) == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            try{
                //Read file
                Scanner scnFile = new Scanner(f);
                scnFile.useDelimiter("§");
                boolean fileValid = true;
                while (scnFile.hasNext() && fileValid) {
                    String[] segments = scnFile.next().split("¿");
                    if (segments.length == 5) {
                        if (Main.dbm.getResearchByID(segments[0].trim()) == -1) {
                            ResearchEntity res = new ResearchEntity();
                            res.setId(segments[0].trim());
                            res.setRelatedformula(segments[1].trim());
                            res.setText(segments[2].trim());
                            res.setRating(Double.parseDouble(segments[3].trim()));
                            res.setVoteamount(Integer.parseInt(segments[4].trim()));
                            
                            Main.dbm.addResearchRecord(res);
                        }else{
                            existingRes.add(segments[0]);
                        }
                    }else{
                        JOptionPane.showMessageDialog(rootPane, "Incorrect file format.", "Error", JOptionPane.ERROR_MESSAGE);
                        fileValid = false;
                    }
                }
                if (existingRes.size() > 0) {
                    String message = "Research already exists:\n";
                    for (String st : existingRes) {
                        message += st + "\n";
                    }
                    JOptionPane.showMessageDialog(rootPane, message, "Notice", JOptionPane.PLAIN_MESSAGE);
                }
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(rootPane, "File not found.", "Error", JOptionPane.ERROR_MESSAGE);
            }catch (NumberFormatException | RollbackException | ArrayIndexOutOfBoundsException corr){
                JOptionPane.showMessageDialog(rootPane, "Incorrect file format.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnImpResearchActionPerformed

    private class NetShareHost implements Runnable{
        private Socket connection;
        private ServerSocket server;
        private ObjectOutputStream outStream;
        private ObjectInputStream inStream;
        private boolean verified,complete,clientComplete;
        private ResearchEntity[] resToShare;
        private HashMap<Integer, Boolean[]> resRequired;
        private ResearchEntity[] newRes;
        public boolean running,connected;
    /**
     * @param args the command line arguments
     */

     
        public NetShareHost(){
        }

        @Override
        public void run(){
            //Setups up variables for what research is required.
            resRequired = new HashMap();
            resToShare = new ResearchEntity[lstResearchItems.getSelectedValuesList().size()];
            int[] indices = lstResearchItems.getSelectedIndices();
            for (int i = 0; i < indices.length; i++) {
                resToShare[i] = Main.dbm.researchList.get(Main.dbm.getResearchByID(resList.get(indices[i])));
            }
            //Basi setup
            connection = new Socket();
            verified = false;
            complete = false;
            newRes = new ResearchEntity[0];
            running = true;
        try {
           server = new ServerSocket(8488, 100);
           txfNetShare.setText(InetAddress.getLocalHost().getHostAddress());
               while(running){//Loop
                   try {
                       checkForConnections();
                       if (connected) {
                           setupStreams();
                           whileChatting();
                       }
                           
                           
                   } catch (EOFException eof) {
                       txfNetShare.setText("Connection closed.");
                       txfNetShare.setEditable(true);
                       btnNetShareHost.setText("Host network share");
                   } finally {
                       running = false;
                       cleanUp();
                       if (verified) {
                               if (complete) {
                                    for (ResearchEntity res : newRes) {
                                        Main.dbm.addResearchRecord(res);
                                    }
                                }else{

                                     for (int i = 0; i < resRequired.values().size(); i++) {
                                         boolean isComplete = true;
                                         for (int j = 0; j < resRequired.get(i).length; j++) {
                                             if (resRequired.get(i)[i] == false) {
                                                 isComplete = false;
                                             }
                                         }
                                         if (isComplete) {
                                             Main.dbm.addResearchRecord(newRes[i]);
                                         }
                                     }
                                }

                                txfNetShare.setText("Completed");
                                btnNetShareHost.setText("Host network share");
                                txfNetShare.setEditable(true);
                                refreshResearchList();
                            }
                   }
               }
           } catch (IOException ex) {
               if (ex.getMessage().contains("BindException")) {
                   txfNetShare.setText("Could not host.");
               }else{
                   txfNetShare.setText("Connection closed.");
               }
               
               System.out.println(ex);
           }
        }

        public void checkForConnections() throws IOException{
            while (!connected && running) {
                server.setSoTimeout(100);
                try{
                   connection = server.accept();
                   connected = connection != null;
                   txfNetShare.setText("Connected");
                }catch(SocketTimeoutException st){
                    try {
                        Thread.sleep(100);
                    } catch (InterruptedException ex) {Logger.getLogger(ResearchShare.class.getName()).log(Level.SEVERE, null, ex);
                    }
                }
            }
        }

        public void setupStreams() throws IOException{
            outStream = new ObjectOutputStream(connection.getOutputStream());
            outStream.flush();
            inStream = new ObjectInputStream(connection.getInputStream());
        }

        public void whileChatting(){
            String message = "";
            verified = false;
            do {             
                try {
                    if (!complete && verified) {
                        //Request data
                        complete = true;
                        int i = 0;
                        while (complete && i < resRequired.values().size()) {
                            for (int j = 0; j < resRequired.get(i).length; j++) {
                                if (resRequired.get(i)[j] == false) {
                                    sendMessage("RETURN#" + i + "#" + j);
                                    complete = false;
                                    break;
                                }
                            }
                            i++;
                        }
                        //Notify on completion
                        if (complete) {
                            sendMessage("COMPLETE");
                            txfNetShare.setText("Completed");
                        }
                    }else{
                        //Ask for verification
                        if (!verified) {
                            sendMessage("REQUESTVERIFICATION");
                        }
                    }
                   message = (String) inStream.readObject();
                   if (verified) {
                        if (message.contains("CLIENT#RETURN#")) {
                            //Send requested data
                            int index = Integer.parseInt(message.split("#")[2]);
                            int segment = Integer.parseInt(message.split("#")[3]);
                            switch (segment) {
                                case 0:
                                    sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getId());
                                    break;
                                case 1:
                                    if (resToShare[index].getRelatedformula() == null) {
                                        sendMessage("ADD#" + index + "#" + segment + "#NULL");
                                    }else{
                                        sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getRelatedformula());
                                    }
                                    break;
                                case 2:
                                    sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getText().trim());
                                    break;
                                case 3:
                                    sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getRating());
                                    break;
                                case 4:
                                    sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getVoteamount());
                                    break;
                                default:
                            }
                        }else{
                            if (message.contains("CLIENT#ADD#")) {
                                //Add recieved data
                                int index = Integer.parseInt(message.split("#")[2]);
                                int segment = Integer.parseInt(message.split("#")[3]);
                                String item = message.split("#")[4];
                                switch (segment) {
                                    case 0:
                                        newRes[index].setId(item.trim());
                                        break;
                                    case 1:
                                        if (item.equals("NULL")) {
                                            newRes[index].setRelatedformula(null);
                                        }else{
                                            newRes[index].setRelatedformula(item.trim());
                                        }
                                        break;
                                    case 2:
                                        newRes[index].setText(item.trim());
                                        break;
                                    case 3:
                                        newRes[index].setRating(Double.parseDouble(item.trim()));
                                        break;
                                    case 4:
                                        newRes[index].setVoteamount(Integer.parseInt(item.trim()));
                                        break;
                                    default:
                                }
                                resRequired.get(index)[segment] = true;
                            }else{
                                if (message.contains("CLIENT#COMPLETE")) {
                                    clientComplete = true;
                                }
                            }
                        }
                    }else{
                        if (message.contains("CLIENT#VERIFY#")) {
                            //Verify and setup resource  tracking
                            int numRes = Integer.parseInt(message.split("#")[2]);
                            for (int i = 0; i < numRes; i++) {
                                resRequired.put(i, new Boolean[]{false,false,false,false});
                            }
                            newRes = new ResearchEntity[numRes];
                            for (int i = 0; i < newRes.length; i++) {
                                newRes[i] = new ResearchEntity();
                            }
                            verified = true;
                        }
                        if (message.contains("CLIENT#REQUESTVERIFICATION")) {
                           sendMessage("VERIFY#" + resToShare.length);
                        }
                    }
                    
                    if (complete && clientComplete) {
                        sendMessage("CLIENT#END");
                        connected = false;
                        
                    }
                } catch (ClassNotFoundException ex) {
                    System.out.println(ex);
                }catch (IOException io){
                       txfNetShare.setText("Connection closed.");
                       connected = false;
                }
            } while (!message.equals("CLIENT#END") && running && connected);
        }

        public void sendMessage(String message){
            try {
                outStream.writeObject("HOST#" + message);
                outStream.flush();
            } catch (IOException e) {
                System.out.println("Cannot send that message.");
            }
        }

        public void cleanUp(){
           try {
               if (connected) {
                    inStream.close();
                    outStream.close();
                    connection.close();
               }
               server.close();
           } catch (IOException ex) {
               Logger.getLogger(ResearchShare.class.getName()).log(Level.SEVERE, null, ex);
           }

        }
        
        public void stop(){
            if (connected) {
                sendMessage("END");
            }
            running = false;
        }
    }
    
    private class NetShareClient implements Runnable{
        private Socket connection;
        private ObjectOutputStream outStream;
        private ObjectInputStream inStream;
        private boolean verified,complete,clientComplete;
        private ResearchEntity[] resToShare;
        private HashMap<Integer, Boolean[]> resRequired;
        private ResearchEntity[] newRes;
        public boolean running,connected;
    /**
     * @param args the command line arguments
     */

     
        public NetShareClient(){
        }

        @Override
        public void run(){
            //Setup resource tracking variables
            resRequired = new HashMap();
            running = true;
            resToShare = new ResearchEntity[lstResearchItems.getSelectedIndices().length];
            complete = false;
            newRes = new ResearchEntity[0];
            int[] indices = lstResearchItems.getSelectedIndices();
            for (int i = 0; i < indices.length; i++) {
                resToShare[i] = Main.dbm.researchList.get(Main.dbm.getResearchByID(resList.get(indices[i])));
            }
            connection = new Socket();
            verified = false;
        try {
               while(running){//Loop
                   try {
                       checkForConnections();
                       if (connected) {
                           setupStreams();
                           whileChatting();
                           System.out.println("");
                       }

                   } catch (EOFException eof) {
                       btnNetShareHost.setText("Connect to network share..");
                       txfNetShare.setText("Connection closed.");
                       txfNetShare.setEditable(true);
                   } finally {
                       running = false;
                       if (connected) {
                           cleanUp();
                       }
                       System.out.println("done");
                       //<editor-fold defaultstate="collapsed" desc="Update res">
                           if (complete) {
                               for (ResearchEntity res : newRes) {
                                   Main.dbm.addResearchRecord(res);
                               }
                           }else{
                               
                               for (int i = 0; i < resRequired.values().size(); i++) {
                                   boolean isComplete = true;
                                   for (int j = 0; j < resRequired.get(i).length; j++) {
                                       if (resRequired.get(i)[i] == false) {
                                           sendMessage("RETURN#" + i + "#" + j);
                                           isComplete = false;
                                       }
                                   }
                                   if (isComplete) {
                                       Main.dbm.addResearchRecord(newRes[i]);
                                   }
                               }
                           }
                           txfNetShare.setText("Completed");
                           btnNetShareConn.setText("Connect to network share..");
                           txfNetShare.setEditable(true);
                           refreshResearchList();
//</editor-fold>
                   }
               }
           } catch (IOException ex) {
               txfNetShare.setText("Could not connect.");
               System.out.println(ex);
           }
        }

        public void checkForConnections() throws IOException{
            connected = false;
            do{
                try{
                    connection = new Socket();
                    connection.connect(new InetSocketAddress(InetAddress.getByName(txfNetShare.getText()),8488),200);
                    
                    System.out.println(connection.getInetAddress().getHostAddress());
                    System.out.println(connection.isBound());
                    txfNetShare.setText("Connected");
                    connected = true;
                }catch(IOException io){
                    connected = false;
                    try {
                        Thread.sleep(200);
                    } catch (InterruptedException ex) {}
                }
            }while(!connected && running);
            if (!connected) {
                connection.close();
            }
        }

        public void setupStreams() throws IOException{
            outStream = new ObjectOutputStream(connection.getOutputStream());
            outStream.flush();
            inStream = new ObjectInputStream(connection.getInputStream());
        }

        public void whileChatting(){
            String message = "";
            verified = false;
            do {             
                try {
                    if (!complete && verified) {
                        complete = true;
                        int i = 0;
                        while (complete && i < resRequired.values().size()) {//request info
                            for (int j = 0; j < resRequired.get(i).length; j++) {
                                if (resRequired.get(i)[j] == false) {
                                    sendMessage("RETURN#" + i + "#" + j);
                                    complete = false;
                                    break;
                                }
                            }
                            i++;
                        }
                        if (complete) {//Notify on completion
                            sendMessage("COMPLETE");
                            txfNetShare.setText("Completed");
                        }
                    }else{
                        if (!verified) {
                            sendMessage("REQUESTVERIFICATION");
                        }
                    }
                   message = (String) inStream.readObject();
                   if (verified) {
                        if (message.contains("HOST#RETURN#")) {//Send requested info
                            int index = Integer.parseInt(message.split("#")[2]);
                            int segment = Integer.parseInt(message.split("#")[3]);
                            switch (segment) {
                                case 0:
                                    sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getId());
                                    break;
                                case 1:
                                    if (resToShare[index].getRelatedformula() == null) {
                                        sendMessage("ADD#" + index + "#" + segment + "#NULL");
                                    }else{
                                        sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getRelatedformula());
                                    }
                                    break;
                                case 2:
                                    sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getText().trim());
                                    break;
                                case 3:
                                    sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getRating());
                                    break;
                                case 4:
                                    sendMessage("ADD#" + index + "#" + segment + "#" + resToShare[index].getVoteamount());
                                    break;
                                default:
                            }
                        }else{
                            if (message.contains("HOST#ADD#")) {//Add recieved info
                                for (String split : message.split("#")) {
                                    System.out.println(split);
                                }
                                int index = Integer.parseInt(message.split("#")[2]);
                                int segment = Integer.parseInt(message.split("#")[3]);
                                String item = message.split("#")[4];
                                switch (segment) {
                                    case 0:
                                        newRes[index].setId(item.trim());
                                        break;
                                    case 1:
                                        if (item.equals("NULL")) {
                                            newRes[index].setRelatedformula(null);
                                        }else{
                                            newRes[index].setRelatedformula(item.trim());
                                        }
                                        
                                        break;
                                    case 2:
                                        newRes[index].setText(item.trim());
                                        break;
                                    case 3:
                                        newRes[index].setRating(Double.parseDouble(item.trim()));
                                        break;
                                    case 4:
                                        newRes[index].setVoteamount(Integer.parseInt(item.trim()));
                                        break;
                                    default:
                                }
                                resRequired.get(index)[segment] = true;
                            }else{
                                if (message.contains("HOST#COMPLETE")) {
                                    clientComplete = true;
                                }
                            }
                        }
                    }else{
                        if (message.contains("HOST#VERIFY#")) {//Send verification
                            int numRes = Integer.parseInt(message.split("#")[2]);
                            for (int i = 0; i < numRes; i++) {
                                resRequired.put(i, new Boolean[]{false,false,false,false});
                            }
                            newRes = new ResearchEntity[numRes];
                            for (int i = 0; i < newRes.length; i++) {
                                newRes[i] = new ResearchEntity();
                            }
                            verified = true;
                        }
                        if (message.contains("HOST#REQUESTVERIFICATION")) {
                           sendMessage("VERIFY#" + resToShare.length);
                        }
                    }
                    
                    if (complete && clientComplete) {
                        sendMessage("HOST#END");
                        connected = false;
                        
                    }
                } catch (ClassNotFoundException ex) {
                    System.out.println(ex);
                }catch (IOException io){
                       txfNetShare.setText("Connection closed.");
                       connected = false;
                }
            } while (!message.equals("HOST#END") && running && connected);
        }

        public void sendMessage(String message){
            try {
                outStream.writeObject("CLIENT#" + message);
                outStream.flush();
            } catch (IOException e) {
                System.out.println("Cannot send that message.");
            }
        }
        
        public void stop(){
            running = false;
            if (connected) {
                sendMessage("END");
            }
        }

        public void cleanUp(){
           try {
               inStream.close();
               outStream.close();
               connection.close();
           } catch (IOException ex) {
               System.out.println(ex);
           }
           connected = false;
        }
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnExpResearch;
    private javax.swing.JButton btnImpResearch;
    private javax.swing.JButton btnNetShareConn;
    private javax.swing.JButton btnNetShareHelp;
    private javax.swing.JButton btnNetShareHost;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JList lstResearchItems;
    private javax.swing.JTextField txfNetShare;
    // End of variables declaration//GEN-END:variables
}
